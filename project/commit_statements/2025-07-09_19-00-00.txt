feat(tooling): implement state management for Claude Code session continuity

- Created state management system based on dual-nature state concept
- Implemented session initialization hook to load context in new sessions
- Added session finalization hook to capture key information
- Created structured state document with project status and focus
- Added reference index to link all relevant resources
- Implemented session record files to preserve context
- Enhanced hook configuration to include state management hooks
- Updated documentation with state management features

Technical details:
- Designed a dual-nature state system with both event logs and snapshots
- Created .claude/state/ directory for state documents and history
- Added .claude/sessions/ directory for session records
- Implemented automated context extraction from conversations
- Added state document generation and updating

Follows patterns from:
- State Management concept (21-state-management.md)
- Dual-Nature State System concept (23-dual-nature-state-system.md)
- Event-snapshot duality for perfect reconstruction and efficient access

Resolves: Context continuity problem between Claude Code sessions
Files: .claude/hooks/session_init.py, .claude/hooks/session_end.py, .claude/state/*, .claude/sessions/*, .claude/hooks.toml
Tests: Basic script tests performed with echo input
