# Claude Code Hooks Configuration
# Advanced configuration for observability, safety, automation, and state management

#==========================================================================
# State Management Hooks - Session continuity
#==========================================================================
[[hooks]]
name = "session_initialization"
event = "MessageReceived"
description = "Initialize new session with state context"
[hooks.matcher]
pattern = "SESSION_INIT"
[hooks.action]
command = "python .claude/hooks/session_init.py"

[[hooks]]
name = "session_finalization"
event = "Stop"
description = "Finalize session and update state document"
[hooks.matcher]
# Run for all stop events (empty matcher)
[hooks.action]
command = "python .claude/hooks/session_end.py"

#==========================================================================
# Safety Hooks - Block dangerous commands
#==========================================================================
[[hooks]]
name = "block_dangerous_commands"
event = "PreToolUse"
description = "Block potentially dangerous shell commands like rm -rf"
[hooks.matcher]
# Run for all tools (empty matcher)
[hooks.action]
command = "python .claude/hooks/pre_tool_use.py"

#==========================================================================
# Observability Hooks - Log all tool executions
#==========================================================================
[[hooks]]
name = "log_tool_executions"
event = "PostToolUse"
description = "Log all tool executions for observability"
[hooks.matcher]
# Run for all tools (empty matcher)
[hooks.action]
command = "python .claude/hooks/post_tool_use.py"

#==========================================================================
# Notification Hooks - Voice feedback
#==========================================================================
[[hooks]]
name = "speak_notifications"
event = "Notification"
description = "Speak notifications using text-to-speech"
[hooks.matcher]
# Run for all notifications (empty matcher)
[hooks.action]
command = "python .claude/hooks/notification.py"

#==========================================================================
# Completion Hooks - Task completion notifications
#==========================================================================
[[hooks]]
name = "speak_completion"
event = "Stop"
description = "Speak task completion notification and log transcript"
[hooks.matcher]
# Run for all completions (empty matcher)
[hooks.action]
command = "python .claude/hooks/stop.py"

#==========================================================================
# Subagent Hooks - Subagent completion notifications
#==========================================================================
[[hooks]]
name = "speak_subagent_completion"
event = "SubAgentStop"
description = "Speak subagent task completion notification"
[hooks.matcher]
# Run for all subagent completions (empty matcher)
[hooks.action]
command = "python .claude/hooks/sub_agent_stop.py"

#==========================================================================
# Original Hooks (Command-based) - From previous implementation
#==========================================================================
[[hooks]]
name = "best_practices_reminder"
event = "MessageReceived"
[hooks.matcher]
pattern = "QNEW"
[hooks.action]
instructions = """
Understand all BEST PRACTICES listed in CLAUDE.md.
Your code SHOULD ALWAYS follow these best practices.
"""

[[hooks]]
name = "plan_analysis"
event = "MessageReceived"
[hooks.matcher]
pattern = "QPLAN"
[hooks.action]
instructions = """
Analyze similar parts of the codebase and determine whether your plan:
- is consistent with rest of codebase
- introduces minimal changes
- reuses existing code
"""

[[hooks]]
name = "code_implementation"
event = "MessageReceived"
[hooks.matcher]
pattern = "QCODE"
[hooks.action]
instructions = """
Implement your plan and make sure your new tests pass.
Always run tests to make sure you didn't break anything else.
Always run `black .` on the newly created files to ensure standard formatting.
Always run `ruff check .` and `mypy .` to make sure linting and type checking passes.
"""

[[hooks]]
name = "code_review"
event = "MessageReceived"
[hooks.matcher]
pattern = "QCHECK"
[hooks.action]
instructions = """
You are a SKEPTICAL senior software engineer.
Perform this analysis for every MAJOR code change you introduced (skip minor changes):

1. CLAUDE.md checklist Writing Functions Best Practices.
2. CLAUDE.md checklist Writing Tests Best Practices.
3. CLAUDE.md checklist Implementation Best Practices.
"""

[[hooks]]
name = "function_review"
event = "MessageReceived"
[hooks.matcher]
pattern = "QCHECKF"
[hooks.action]
instructions = """
You are a SKEPTICAL senior software engineer.
Perform this analysis for every MAJOR function you added or edited (skip minor changes):

1. CLAUDE.md checklist Writing Functions Best Practices.
"""

[[hooks]]
name = "test_review"
event = "MessageReceived"
[hooks.matcher]
pattern = "QCHECKT"
[hooks.action]
instructions = """
You are a SKEPTICAL senior software engineer.
Perform this analysis for every MAJOR test you added or edited (skip minor changes):

1. CLAUDE.md checklist Writing Tests Best Practices.
"""

[[hooks]]
name = "ux_testing"
event = "MessageReceived"
[hooks.matcher]
pattern = "QUX"
[hooks.action]
instructions = """
Imagine you are a human UX tester of the feature you implemented. 
Output a comprehensive list of scenarios you would test, sorted by highest priority.
"""

[[hooks]]
name = "git_commit"
event = "MessageReceived"
[hooks.matcher]
pattern = "QGIT"
[hooks.action]
instructions = """
Add all changes to staging, create a commit, and push to remote.

Write a text version of the commit message to a timestamped file (format: YYYY-MM-DD_HH-MM-SS.txt) and place it in the project/commit_statements directory.

Follow this checklist for writing your commit message:
- SHOULD use Conventional Commits format: https://www.conventionalcommits.org/en/v1.0.0
- SHOULD NOT refer to Claude or Anthropic in the commit message.
- SHOULD structure commit message as follows:
<type>[optional scope]: <description>
[optional body]
[optional footer(s)]
"""

#==========================================================================
# IADPVEC Workflow Hooks - From previous implementation
#==========================================================================
[[hooks]]
name = "iadpvec_task_proposal"
event = "MessageReceived"
[hooks.matcher]
pattern = "PROPOSE_TASK"
[hooks.action]
instructions = """
I'll help you create a new task proposal following the IADPVEC methodology.

Let me guide you through:
1. INGEST: Gathering context
2. ASSESS: Analyzing current state
3. DISCUSS: Proposing solutions

I'll create a structured task proposal based on our discussion.
"""

[[hooks]]
name = "iadpvec_task_validation"
event = "MessageReceived"
[hooks.matcher]
pattern = "VALIDATE_TASK"
[hooks.action]
instructions = """
I'll help validate the completed task implementation against success criteria.

Let me check:
1. Component verification
2. Feature verification
3. Success criteria validation
4. Technical implementation notes
5. Deployment readiness

I'll create a comprehensive validation report.
"""

[[hooks]]
name = "project_status_update"
event = "MessageSent"
description = "Periodically remind to update project status"
[hooks.matcher]
count = 10
[hooks.action]
instructions = """
Reminder: Consider creating a project status update file to document our progress.

This helps with:
- Tracking IADPVEC phase
- Documenting decisions
- Preserving context for future sessions
- Recording implementation details

Would you like me to help create a status update?
"""

#==========================================================================
# New Parallel Processing Hook - Run tasks in parallel
#==========================================================================
[[hooks]]
name = "parallel_processing"
event = "MessageReceived"
[hooks.matcher]
pattern = "PARALLEL"
[hooks.action]
instructions = """
I'll help you run multiple tasks in parallel using Claude Code's subagent capabilities.

Please provide the tasks you want to run in parallel, separated by semicolons (;).
For example: "PARALLEL analyze this code; summarize this document; create a test plan"

I'll split these into separate tasks and execute them concurrently, then combine the results.
"""
